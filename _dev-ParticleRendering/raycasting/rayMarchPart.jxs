<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="P" type="mat4" state="PROJECTION_MATRIX" />
	<param name="M" type="mat4" state="WORLD_MATRIX" />
        
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="color" type="vec4" state="COLOR" />
	<param name="posTex" type="int" default="0" />
	<param name="size" type="float" default="0.05" />
    <param name="random" type="vec3" state="NORMAL" />
	<param name="uv" type="vec2" state="TEXCOORD" />
    <param name="drawmode" type="int" default="0" />
<param name="nearclip" type="float" state="NEAR_CLIP" />
<param name="farclip" type="float" state="FAR_CLIP" />
	<language name="glsl" version="1.5">
		<bind param="MV" program="vp" />
		<bind param="P" program="gp" />
        <bind param="M" program="vp" />
        
		<bind param="posTex" program="vp" />
        <bind param="posTex" program="fp" />
		<bind param="color" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="uv" program="fp" />
		<bind param="eye" program="fp" />
    	<bind param="eye" program="vp" />
		<bind param="invV" program="gp" />
		<bind param="nearclip" program="fp" />
		<bind param="farclip" program="fp" />
		<bind param="size" program="gp" />
		<bind param="random" program="vp" />
        <bind param="drawmode" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

uniform mat4 MV, M;
uniform sampler2D posTex;
uniform vec3 eye;

in vec2 uv;
in vec4 color;
in vec3 random;

out jit_PerVertex {
	flat vec4 color;	
    flat vec3 random;
    flat float max_dist;
} jit_out;

void main() {	
	vec3 pos = texture(posTex, uv).xyz;
	gl_Position = MV * vec4(pos, 1.0);	
	jit_out.color = vec4(pos,1.0);
    jit_out.random = random;
    vec3 center = (M * vec4(pos,1.)).xyz;
    jit_out.max_dist = length(center - eye) + 0.01;
}
]]>
		</program>
		<program name="gp" vertices_out="4" input_type="lines_adjacency" output_type="triangle_strip" type="geometry">
<![CDATA[
#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices=4) out;

in jit_PerVertex {
	flat vec4 color;	
    flat vec3 random;
    flat float max_dist;
    } jit_in[];

out jit_PerVertex {
	flat vec4 color;	
	smooth vec3 wPos;
	flat vec3 center;
	flat float radius;
    flat vec3 random;
    flat float max_dist;

};

uniform mat4 P, invV;
uniform float size;

void main() {

	center = (invV * gl_in[0].gl_Position).xyz;
	radius  = size * 0.5;
    random = jit_in[0].random;
    max_dist = jit_in[0].max_dist;
	vec4 vPos;

	vPos = (gl_in[0].gl_Position + vec4(-size,-size,0.,0.));
	gl_Position = P * vPos;
	wPos = (invV * vPos).xyz;
	color = jit_in[0].color;
	EmitVertex();

	vPos = (gl_in[0].gl_Position + vec4(-size,+size,0.,0.));
	gl_Position = P * vPos;
	wPos = (invV * vPos).xyz;
	color = jit_in[0].color;
	EmitVertex();

	vPos = (gl_in[0].gl_Position + vec4(+size,-size,0.,0.));
	gl_Position = P * vPos;
	wPos = (invV * vPos).xyz;
	color = jit_in[0].color;
	EmitVertex();

	vPos = (gl_in[0].gl_Position + vec4(+size,+size,0.,0.));
	gl_Position = P * vPos;
	wPos = (invV * vPos).xyz;
	color = jit_in[0].color;
	EmitVertex();
	
	EndPrimitive();
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core
#define MIN_DIST 0.0001
#define MAX_STEPS 100
#define MAX_DIST 100



uniform vec3 eye;
uniform float nearclip;
uniform float farclip;
uniform int drawmode;
uniform sampler2D posTex;
uniform vec2 uv;

in jit_PerVertex {
	flat vec4 color;
	smooth vec3 wPos;
	flat vec3 center;
	flat float radius;
    flat vec3 random;
    flat float max_dist;
} jit_in;

out vec4 color;

mat4 rotationAxisAngle( vec3 v, float angle )
{
    float s = sin( angle );
    float c = cos( angle );
    float ic = 1.0 - c;

    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,
                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,
                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,
			     0.0,                0.0,                0.0,                1.0 );
}

mat4 translate( vec3 r)
{
    return mat4( 1.0, 0.0, 0.0, 0.0,
				 0.0, 1.0, 0.0, 0.0,
				 0.0, 0.0, 1.0, 0.0,
				 r.x,   r.y,   r.z,   1.0 );
}



vec2 OctWrap( vec2 v )
{
	float x = ( 1.0 - abs( v.y ) ) * ( v.x >= 0.0 ? 1.0 : -1.0 );
	float y = ( 1.0 - abs( v.x ) ) * ( v.y >= 0.0 ? 1.0 : -1.0 );
    return vec2(x, y);
}
 
vec2 Encode( vec3 n )
{
    n /= ( abs( n.x ) + abs( n.y ) + abs( n.z ) );
    n.xy = n.z >= 0.0 ? n.xy : OctWrap( n.xy );
    n.xy = n.xy * 0.5 + 0.5;
    return n.xy;
}

// SMIN Function

    float smin(float a , float b , float k ) {
        //returns the smooth minimum between two distances
        //k controls the smoothness
        k *= 16.0/3.0;
    float x = (b-a)/k;
    float g = (x> 1.0) ? x :
              (x<-1.0) ? 0.0 :
              (x+1.0)*(x+1.0)*(3.0-x*(x-2.0))/16.0;
    return b - k * g;
}

float opSmoothSubtraction( float d1, float d2, float k )
    {
        float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );   
        return mix( d2, -d1, h ) + k*h*(1.0-h);
    }

// SDF Functions

float SDFsphere(vec3 pos, vec3 center, float radius) {
		return length(pos - center) - radius;
	}

    float SDFBox(vec3 pos, vec3 center, vec3 radius) {
        vec3 d = abs(pos + center) - radius;
        return min(max(d.x, max(d.y,d.z)),0.) + length(max(d,0.));
    }

float SDFplane(vec3 pos, vec3 nor, float h){
	//SDF of a plane
	//remember to normalize the orientation (nor) of the plane
	return dot(pos, nor) + h;
}

float getDist(vec3 pos) {
    float spheres1;
    float spheres;
    
    spheres1 = SDFsphere(pos,jit_in.center,jit_in.radius);
    spheres = smin(spheres1,SDFsphere(pos,jit_in.center,jit_in.radius),0.012);
    
    return spheres;
    }

float map(vec3 ro, vec3 rd) {
    float currDist = nearclip;
    float dist = 0;
    vec3 pos;

    for(int i=0; i < MAX_STEPS; i++){
        pos = ro + rd * currDist;
        dist = getDist(pos);
        currDist += dist;
        if (dist < MIN_DIST || currDist > jit_in.max_dist ) {
            break;
        }
    }
    return currDist;

	}

	vec3 getNorm(vec3 hitPos) {

		vec2 eps = vec2(0.00001,0.0);
		// to get more precice results we need to subtract with the same function but instead of add Epsilon we subtract
		float shiftx = getDist(hitPos + eps.xyy) - getDist(hitPos - eps.xyy);
		float shifty = getDist(hitPos + eps.yxy) - getDist(hitPos - eps.yxy);
		float shiftz = getDist(hitPos + eps.yyx) - getDist(hitPos - eps.yyx);

		return normalize(vec3(shiftx,shifty,shiftz));
	}

void main() {

    float id = jit_in.random.y;

	vec3 ro = eye;
	vec3 rd = normalize(jit_in.wPos - eye);
    vec3 pos = texture(posTex, uv).xyz;

    float dist = map(ro,rd);

    vec4 form;



    vec4 closest = form;
	
	if (dist >= jit_in.max_dist) { discard; }

    vec3 nor = getNorm(ro+rd*dist);

	dist = (dist-nearclip) / (farclip - nearclip);


	gl_FragDepth = dist;
	vec2 encodedNor = Encode(nor);
	
	color = vec4(encodedNor, id, dist);
    
    
}	
]]>
		</program>
	</language>
</jittershader>

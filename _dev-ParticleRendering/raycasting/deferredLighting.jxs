<jittershader name="default">
	<description>Default Slab </description>
	<param name="norTex" type="int" default="0" />
	<param name="posTex" type="int" default="1" />
	<param name="occTex" type="int" default="2" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="position" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<language name="glsl" version="1.5">
		<bind param="norTex" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="occTex" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="position" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="eye" program="fp" />
		<bind param="invV" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 MVP;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = MVP*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			
			uniform sampler2DRect norTex, posTex, occTex;
			uniform vec3 eye;
			uniform mat4 invV;
			vec3 Decode( vec2 f )
{
    f = f * 2.0 - 1.0;
 
    // https://twitter.com/Stubbesaurus/status/937994790553227264
    vec3 n = vec3( f.x, f.y, 1.0 - abs( f.x ) - abs( f.y ) );
    float t = clamp( -n.z, 0., 1. );
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize( n );
}
			void main(void) {

				vec4 lookup = texture(norTex, jit_in.texcoord);
				if(lookup.w == 0.){discard;}
				vec4 vPos = texture(posTex, jit_in.texcoord);
				vec3 wPos = (invV * vPos).xyz;

				float shape = sin(wPos.y*2)*0.5 + 0.5;

				vec3 nor = Decode(lookup.xy);
				float id = lookup.z;
				float depth = lookup.w;

				vec3 alb = mix( vec3(0.8, 0.7, 0.1), vec3(1.), vec3(shape));;
				vec3 col = vec3(0.);

				vec3 V = normalize(wPos - eye);
				vec3 R = reflect(V, nor);

				float kD = 0.1;
				float kS = 1. - kD;

				{
					vec3 lig = normalize(vec3(1., 1., 0.));
					vec3 ligCol = vec3(1., 0.7, 0.1);
					float diff = max(0., dot(lig, nor));
					col += diff * ligCol * alb * kD;

					float spe = max(0., dot(R, lig));
					spe = pow(spe, 100);
					col += spe * ligCol * alb * kS;
				}

				{
					vec3 lig = normalize(vec3(-1., 1., 0.));
					vec3 ligCol = vec3(0.1, 0.2, 1.);
					float diff = max(0., dot(lig, nor));
					col += diff * ligCol * alb * kD;

					float spe = max(0., dot(R, lig));
					spe = pow(spe, 100);
					col += spe * ligCol * alb * kS;

				}

				{
					vec3 lig = normalize(vec3(0., 1., 0.));
					vec3 ligCol = vec3(1.);
					float diff = max(0., dot(lig, nor));
					col += diff * ligCol * alb * kD;

					float spe = max(0., dot(R, lig));
					spe = pow(spe, 100);
					col += spe * ligCol * alb * kS;

				}
					vec3 ligCol = vec3(0.5);
					float occ = texture(occTex, jit_in.texcoord).r;
					col += ligCol * occ * alb;
				{

				}

				col /= col + 1.;
				col = pow(col, vec3(0.4545454545));
				outColor.rgb = col;
				outColor.a = 1.; 
			}
		]]>
		</program>
	</language>
</jittershader>
